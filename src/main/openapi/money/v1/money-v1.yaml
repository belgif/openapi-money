openapi: 3.0.0
info:
  title: data types for money
  version: ${project.version}
servers: []
paths: {}
components:
  schemas:
    EuroCentPositiveAmount:
      description: Money amount in Euro cents >= 0
      type: integer # representation as Euro cent instead of Euro to avoid floating point rounding problems and need for custom 'number' format
      minimum: 0
    EuroCentAmount:
      description: 'Money amount in Euro cents, also allows negative amounts.'
      type: integer # representation as Euro cent instead of Euro to avoid floating point rounding problems and need for custom 'number' format
    Iban:
      description: 'International Bank Account Number, as defined in ISO 13616:2007'
      type: string
      pattern: '^[A-Z]{2}[0-9]{2}[A-Z0-9]{1,30}$'
      # consists of:
      #   country code (two letters - ISO 3166-1 alpha-2)
      #   two check digits
      #   up to 30 alphanumeric characters that are country-specific
    Bic:
      description: Business Identifier Code, also known as Swift Code. International identifier for financial and non-financial institutions, commonly used for international bank transfers.
      type: string
      pattern: '^[A-Z]{4}[A-Z]{2}[A-Z0-9]{2}([A-Z0-9]{3})?$'
      # consists of:
      #   institution code (4 letters)
      #   country code (2 letters - ISO 3166-1 alpha-2)
      #   location code (2 alphanumeric characters)
      #   optional branch code (3 alphanumeric characters)
    Currency:
      description: A currency represented by its ISO 4217 alpha code
      type: string
      pattern: "^[A-Z]{3}$"
      example: "EUR"
    MonetaryAmount:
      description: A monetary amount
      type: object
      properties:
        value:
          "$ref": "#/components/schemas/MonetaryValue"
        currency:
          "$ref": "#/components/schemas/Currency"
      required: [value, currency]
      example:
        value: "0.01"
        currency: "EUR"
    MonetaryValue:
      description: The numerical part of a monetary amount in decimal notation. Negative values are allowed.
      type: string   # string conserves decimal precision
      format: number # number is a custom string format that is supported by some, but not all tooling
      pattern: '^(\-|\+)?((\d+(\.\d*)?)|(\.\d+))$'  # Variable number of digits, with at least one digit required, before or after the decimal point. Allows both positive and negative values.
      x-examples:
      - "100.234567"
      - "010"
      - "-.05"
      - "+1"
      - "10"
      - "100." 
    BelgianRemittanceInformation:
      description: Remittance Information for credit transfers as supported by Belgian banks
      oneOf:
        - $ref: "#/components/schemas/BelgianRemittanceInformationUnstructured"
        - $ref: "#/components/schemas/BelgianRemittanceInformationStructured"
    BelgianRemittanceInformationUnstructured:
      description: Unstructured Remittance Information as supported by Belgian banks
      type: string
      maxLength: 140
    BelgianRemittanceInformationStructured:
      description: Structured Remittance Information in the Belgian OGM-VCS format
      type: string
      pattern: "^\\d{12}$"
      example: "010806817183"
      # Often formatted for display as +++ 3 digits / 4 digits / 5 digits / +++ (example: +++010/8068/17183+++)
      # The last 2 digits are check digits (modulo 97) of the first 10 digits, but if the result is 0, then the check digits are 97